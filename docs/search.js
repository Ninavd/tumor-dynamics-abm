window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "tumor-dynamics-abm.tumor", "modulename": "tumor-dynamics-abm.tumor", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "tumor-dynamics-abm.tumor.classes", "modulename": "tumor-dynamics-abm.tumor.classes", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "tumor-dynamics-abm.tumor.classes.collect_averages", "modulename": "tumor-dynamics-abm.tumor.classes.collect_averages", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "tumor-dynamics-abm.tumor.classes.collect_averages.RunCollection", "modulename": "tumor-dynamics-abm.tumor.classes.collect_averages", "qualname": "RunCollection", "kind": "class", "doc": "<p>Execute multiple runs of TumorGrowth with the same parameters but different seeds.</p>\n"}, {"fullname": "tumor-dynamics-abm.tumor.classes.collect_averages.RunCollection.__init__", "modulename": "tumor-dynamics-abm.tumor.classes.collect_averages", "qualname": "RunCollection.__init__", "kind": "function", "doc": "<p>Initialize RunCollection object.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>N (int):</strong>  Number of runs.</li>\n<li><strong>log (bool):</strong>  if True, stdout and stderr are save in seperate logfiles; \noutput_log.txt and error_log.txt</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">N</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">log</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "tumor-dynamics-abm.tumor.classes.collect_averages.RunCollection.N", "modulename": "tumor-dynamics-abm.tumor.classes.collect_averages", "qualname": "RunCollection.N", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "tumor-dynamics-abm.tumor.classes.collect_averages.RunCollection.kwargs", "modulename": "tumor-dynamics-abm.tumor.classes.collect_averages", "qualname": "RunCollection.kwargs", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict"}, {"fullname": "tumor-dynamics-abm.tumor.classes.collect_averages.RunCollection.run", "modulename": "tumor-dynamics-abm.tumor.classes.collect_averages", "qualname": "RunCollection.run", "kind": "function", "doc": "<p>Run N simulations, return the averaged results and confidence intervals and save to csv.</p>\n\n<p>Results includes the averaged progression over time of the absolute and\nproportional cell counts, roughness, radius and growth velocity of the tumor.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>dict[str, ndarray]: parameter name and the averaged progression over time.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "tumor-dynamics-abm.tumor.classes.collect_averages.RunCollection.collect_results", "modulename": "tumor-dynamics-abm.tumor.classes.collect_averages", "qualname": "RunCollection.collect_results", "kind": "function", "doc": "<p>Collect results of a single run.      </p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>model (TumorGrowth):</strong>  Tumor model of completed simulation.</li>\n<li><strong>i (int):</strong>  current run number.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">tumor</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">tumor_growth</span><span class=\"o\">.</span><span class=\"n\">TumorGrowth</span>, </span><span class=\"param\"><span class=\"n\">i</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tumor-dynamics-abm.tumor.classes.collect_averages.RunCollection.collect_mean_results", "modulename": "tumor-dynamics-abm.tumor.classes.collect_averages", "qualname": "RunCollection.collect_mean_results", "kind": "function", "doc": "<p>Average all the results, and find the 95% confidence interval and return.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>dict[str, ndarray]: averaged results and its confidence interval.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "tumor-dynamics-abm.tumor.classes.collect_averages.RunCollection.calculate_CI", "modulename": "tumor-dynamics-abm.tumor.classes.collect_averages", "qualname": "RunCollection.calculate_CI", "kind": "function", "doc": "<p>Find mean and confidence interval of list of run results.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>arr_of_results (ndarray):</strong>  list of progressions, where each row represents one run. </li>\n<li><strong>z (float):</strong>  z-value in confidence interval calculation. Default is 1.96.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">arr_of_results</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">z</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">1.96</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tumor-dynamics-abm.tumor.classes.collect_averages.RunCollection.plot_with_CI", "modulename": "tumor-dynamics-abm.tumor.classes.collect_averages", "qualname": "RunCollection.plot_with_CI", "kind": "function", "doc": "<p>Plot the average progression with confidence interval.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>mean (ndarray[float]):</strong>  Averaged progression over time.</li>\n<li><strong>CI (ndarray[float]):</strong>  Confidence interval of averaged progression.</li>\n<li><strong>ylabel (str):</strong>  label for y-axis of plot. Default is None.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">mean</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">CI</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">ylabel</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tumor-dynamics-abm.tumor.classes.collect_averages.RunCollection.save_to_csv", "modulename": "tumor-dynamics-abm.tumor.classes.collect_averages", "qualname": "RunCollection.save_to_csv", "kind": "function", "doc": "<p>Save the averaged results and confidence interval to csv.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>model (TumorGrowth):</strong>  A TumorGrowth model containing the run parameters.</li>\n<li><strong>results (dict[str, ndarray]):</strong>  The averaged results to save to csv.</li>\n<li><strong>save_dir (str):</strong>  Directory to save csv to. Default is 'save_files/averaged_runs'</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">model</span>,</span><span class=\"param\">\t<span class=\"n\">results</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">save_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;save_files/averaged_runs&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tumor-dynamics-abm.tumor.classes.tumor_cell", "modulename": "tumor-dynamics-abm.tumor.classes.tumor_cell", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "tumor-dynamics-abm.tumor.classes.tumor_cell.TumorCell", "modulename": "tumor-dynamics-abm.tumor.classes.tumor_cell", "qualname": "TumorCell", "kind": "class", "doc": "<p>This class represents a tumor cell agent.</p>\n\n<p>A tumor cell can be proliferating, invasive or necrotic. Once it becomes necrotic,\nit is removed. Tumor cells can switch between proliferating and invading based on their surroundings.\nThey take into account local nutrient and tumor cell density, as well as behavior of neighbors.</p>\n", "bases": "mesa.agent.Agent"}, {"fullname": "tumor-dynamics-abm.tumor.classes.tumor_cell.TumorCell.__init__", "modulename": "tumor-dynamics-abm.tumor.classes.tumor_cell", "qualname": "TumorCell.__init__", "kind": "function", "doc": "<p>Initialize TumorCell object.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>state (str):</strong>  initial state of the cell, proliferating or invasive.</li>\n<li><strong>unique_id (int):</strong>  unique identifier of agent. Required by 'Agent' ancestor class.</li>\n<li><strong>model (TumorGrowth):</strong>  model aget is active in. </li>\n<li><strong>seed (int):</strong>  to seed the agent.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">state</span>, </span><span class=\"param\"><span class=\"n\">unique_id</span>, </span><span class=\"param\"><span class=\"n\">model</span>, </span><span class=\"param\"><span class=\"n\">seed</span></span>)</span>"}, {"fullname": "tumor-dynamics-abm.tumor.classes.tumor_cell.TumorCell.state", "modulename": "tumor-dynamics-abm.tumor.classes.tumor_cell", "qualname": "TumorCell.state", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "tumor-dynamics-abm.tumor.classes.tumor_cell.TumorCell.next_state", "modulename": "tumor-dynamics-abm.tumor.classes.tumor_cell", "qualname": "TumorCell.next_state", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "tumor-dynamics-abm.tumor.classes.tumor_cell.TumorCell.seed", "modulename": "tumor-dynamics-abm.tumor.classes.tumor_cell", "qualname": "TumorCell.seed", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "tumor-dynamics-abm.tumor.classes.tumor_cell.TumorCell.generate_next_state", "modulename": "tumor-dynamics-abm.tumor.classes.tumor_cell", "qualname": "TumorCell.generate_next_state", "kind": "function", "doc": "<p>Alter state with probability p. </p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>nutrient_score (float):</strong>  nutrient concentration in current cell.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">nutrient_score</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tumor-dynamics-abm.tumor.classes.tumor_cell.TumorCell.p_proliferate_invasive", "modulename": "tumor-dynamics-abm.tumor.classes.tumor_cell", "qualname": "TumorCell.p_proliferate_invasive", "kind": "function", "doc": "<p>Return probability of the tumor cell be(com)ing proliferative/invasive.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>nutrient_score (float):</strong>  nutrient concentration in current cell.</li>\n<li><strong>which (str):</strong>  which probability to return, invasive or proliferate.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">nutrient_score</span>, </span><span class=\"param\"><span class=\"n\">which</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tumor-dynamics-abm.tumor.classes.tumor_cell.TumorCell.probability_proliferate", "modulename": "tumor-dynamics-abm.tumor.classes.tumor_cell", "qualname": "TumorCell.probability_proliferate", "kind": "function", "doc": "<p>Return probability of the tumor cell be(com)ing proliferative.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>nutrient_score (float):</strong>  nutrient concentration in current cell.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">nutrient_score</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tumor-dynamics-abm.tumor.classes.tumor_cell.TumorCell.probability_invasion", "modulename": "tumor-dynamics-abm.tumor.classes.tumor_cell", "qualname": "TumorCell.probability_invasion", "kind": "function", "doc": "<p>Return probability of the tumor cell be(com)ing invasive.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>nutrient_score (float):</strong>  nutrient concentration in current cell.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">nutrient_score</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tumor-dynamics-abm.tumor.classes.tumor_cell.TumorCell.step", "modulename": "tumor-dynamics-abm.tumor.classes.tumor_cell", "qualname": "TumorCell.step", "kind": "function", "doc": "<p>Exhibit proliferative or invasive behavior.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tumor-dynamics-abm.tumor.classes.tumor_cell.TumorCell.invade", "modulename": "tumor-dynamics-abm.tumor.classes.tumor_cell", "qualname": "TumorCell.invade", "kind": "function", "doc": "<p>Migrate to neighboring site if possible.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>best_cell (tuple):</strong>  coordinates of best neighboring grid cell to invade.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">best_cell</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tumor-dynamics-abm.tumor.classes.tumor_cell.TumorCell.proliferate", "modulename": "tumor-dynamics-abm.tumor.classes.tumor_cell", "qualname": "TumorCell.proliferate", "kind": "function", "doc": "<p>Create daughter cell and place on grid.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>best_cell (tuple):</strong>  coordinates of best neighboring grid cell to invade.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">best_cell</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tumor-dynamics-abm.tumor.classes.tumor_cell.TumorCell.die", "modulename": "tumor-dynamics-abm.tumor.classes.tumor_cell", "qualname": "TumorCell.die", "kind": "function", "doc": "<p>State of tumor cell is set to necrotic and agent is removed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tumor-dynamics-abm.tumor.classes.tumor_cell.TumorCell.get_best_neighbor_site", "modulename": "tumor-dynamics-abm.tumor.classes.tumor_cell", "qualname": "TumorCell.get_best_neighbor_site", "kind": "function", "doc": "<p>Find optimal neighboring site for migration/daughter cell.</p>\n\n<p>Sites with low tumor cells and high nutrient score are preferred.\nOnly grid cells with zero ECM (healthy tissue) are considered.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>tuple[int, int]: coordinates of best neighboring site.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">nutrient_grid</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "tumor-dynamics-abm.tumor.classes.tumor_cell.TumorCell.get_empty_ecm_sites", "modulename": "tumor-dynamics-abm.tumor.classes.tumor_cell", "qualname": "TumorCell.get_empty_ecm_sites", "kind": "function", "doc": "<p>Find all neighboring sites with zero ECM.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list[tuple]: list of coordinates of neighboring zero ECM sites.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "tumor-dynamics-abm.tumor.classes.tumor_growth", "modulename": "tumor-dynamics-abm.tumor.classes.tumor_growth", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "tumor-dynamics-abm.tumor.classes.tumor_growth.TumorGrowth", "modulename": "tumor-dynamics-abm.tumor.classes.tumor_growth", "qualname": "TumorGrowth", "kind": "class", "doc": "<p>Tumor Growth Model.</p>\n\n<p>Simulate tumor growth in healthy tissue for a number of time steps.\nTumor is initialized with a single proliferative cell in the center of the two-dimensional grid.\nSnapshots of the healthy tissue and nutrient distribution, cell counts and tumor shapes are saved.</p>\n\n<h6 id=\"example-usage\">Example usage:</h6>\n\n<blockquote>\n<pre><code>model = TumorGrowth()       # initialize model with default parameters.\nresults = model.run_model() # run model for 1000 steps. \n</code></pre>\n</blockquote>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>scheduler:</strong>  Schedules activation of agents.</li>\n<li><strong>TVH:</strong>  Calculates properties of the tumor.</li>\n<li><strong>height, width:</strong>  Grid size.</li>\n<li><strong>center:</strong>  Center of the grid, assuming grid is square.</li>\n<li><strong>steps:</strong>  Defines maximum number of steps taken in a simulation.</li>\n<li><strong>seed:</strong>  Defines seed of the simulation.</li>\n<li><strong>ecm_layer:</strong>  Represents healthy tissue distribution (ECM).</li>\n<li><strong>nutrient_layer:</strong>  Represents nutrient concentration field.</li>\n<li><strong>grid:</strong>  Discretized grid containing the TumorCell agents. </li>\n<li><strong>app, api, bip, bii:</strong>  Elements in payoff matrix.</li>\n<li><strong>k:</strong>  Indicates how many nutrients an agent consumes.</li>\n<li><strong>tau:</strong>  Parameter of reaction-diffusion equation.</li>\n<li><strong>gamma (float):</strong>  Inidicates with what factor an agent degrades the ecm.</li>\n<li><strong>D :</strong>  Diffusion constant.</li>\n<li><strong>theta_i, theta_p:</strong>  Shape parameters.</li>\n<li><strong>lam:</strong>  parameter in discretized reaction-diffusion equation.</li>\n<li><strong>phi_c:</strong>  Indicates critical nutrient threshold, below which agents die.</li>\n<li><strong>distribution:</strong>  Defines ECM distribution. Either 'random' or 'voronoi'.</li>\n<li><strong>N_T:</strong>  Current distribution of living agents, excluding necrotic agents. </li>\n<li><strong>Nec:</strong>  Current distribution of necrotic agents.</li>\n<li><strong>number_births:</strong>  total number of births.</li>\n<li><strong>number_deaths:</strong>  total number of deaths.</li>\n<li><strong>ecm_layers:</strong>  Contains snapshots of ECM distribution.</li>\n<li><strong>nutrient_layers:</strong>  Contains snapshots of nutrient distribution.</li>\n<li><strong>N_Ts:</strong>  Contains snapshots of spatial living agent distribution.</li>\n<li><strong>Necs:</strong>  Contains snapshots of spatial necrotic agent distribution. </li>\n<li><strong>birth:</strong>  Records cumulative number of births.</li>\n<li><strong>radii:</strong>  Records radius of tumor at the end of simulation.</li>\n<li><strong>delta_d:</strong>  Time interval to calculate velocity on.</li>\n<li><strong>proliferating_cells:</strong>  Number of proliferating agents at each iteration.</li>\n<li><strong>invasive_cells:</strong>  Number of invasive agents at each iteration.</li>\n<li><strong>necrotic_cells:</strong>  Total number of necrotic agents (deaths).</li>\n</ul>\n", "bases": "mesa.model.Model"}, {"fullname": "tumor-dynamics-abm.tumor.classes.tumor_growth.TumorGrowth.__init__", "modulename": "tumor-dynamics-abm.tumor.classes.tumor_growth", "qualname": "TumorGrowth.__init__", "kind": "function", "doc": "<p>Initializes model based on provided parameters.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>height, width (int, int):</strong>  grid size.</li>\n<li><strong>steps (int):</strong>  Defines maximum number of steps taken in a simulation.</li>\n<li><strong>seed (int):</strong>  Defines seed of the simulation.</li>\n<li><strong>app, api, bip, bii:</strong>  Matrix elements in payoff matrix.</li>\n<li><strong>k (float):</strong>  Indicates how many nutrients an agent consumes.</li>\n<li><strong>tau (float):</strong>  Parameter of reaction-diffusion equation.</li>\n<li><strong>gamma (float):</strong>  Inidicates with what factor an agent degrades the ecm.</li>\n<li><strong>D (float):</strong>  Diffusion constant.</li>\n<li><strong>theta_i, theta_p (float, float):</strong>  Shape parameters.</li>\n<li><strong>lam (float):</strong>  parameter in discretized reaction-diffusion equation.</li>\n<li><strong>phi_c (float):</strong>  Indicates critical nutrient threshold, below which agents die.</li>\n<li><strong>distribution (str):</strong>  Defines ECM distribution. Either 'random' or 'voronoi'.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">height</span><span class=\"o\">=</span><span class=\"mi\">101</span>,</span><span class=\"param\">\t<span class=\"n\">width</span><span class=\"o\">=</span><span class=\"mi\">101</span>,</span><span class=\"param\">\t<span class=\"n\">steps</span><span class=\"o\">=</span><span class=\"mi\">1000</span>,</span><span class=\"param\">\t<span class=\"n\">delta_d</span><span class=\"o\">=</span><span class=\"mi\">100</span>,</span><span class=\"param\">\t<span class=\"n\">D</span><span class=\"o\">=</span><span class=\"mf\">0.0001</span>,</span><span class=\"param\">\t<span class=\"n\">k</span><span class=\"o\">=</span><span class=\"mf\">0.02</span>,</span><span class=\"param\">\t<span class=\"n\">gamma</span><span class=\"o\">=</span><span class=\"mf\">0.0005</span>,</span><span class=\"param\">\t<span class=\"n\">phi_c</span><span class=\"o\">=</span><span class=\"mf\">0.02</span>,</span><span class=\"param\">\t<span class=\"n\">theta_p</span><span class=\"o\">=</span><span class=\"mf\">0.2</span>,</span><span class=\"param\">\t<span class=\"n\">theta_i</span><span class=\"o\">=</span><span class=\"mf\">0.2</span>,</span><span class=\"param\">\t<span class=\"n\">app</span><span class=\"o\">=-</span><span class=\"mf\">0.1</span>,</span><span class=\"param\">\t<span class=\"n\">api</span><span class=\"o\">=-</span><span class=\"mf\">0.02</span>,</span><span class=\"param\">\t<span class=\"n\">bip</span><span class=\"o\">=</span><span class=\"mf\">0.02</span>,</span><span class=\"param\">\t<span class=\"n\">bii</span><span class=\"o\">=</span><span class=\"mf\">0.1</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">913</span>,</span><span class=\"param\">\t<span class=\"n\">distribution</span><span class=\"o\">=</span><span class=\"s1\">&#39;uniform&#39;</span></span>)</span>"}, {"fullname": "tumor-dynamics-abm.tumor.classes.tumor_growth.TumorGrowth.scheduler", "modulename": "tumor-dynamics-abm.tumor.classes.tumor_growth", "qualname": "TumorGrowth.scheduler", "kind": "variable", "doc": "<p></p>\n", "annotation": ": mesa.time.RandomActivation"}, {"fullname": "tumor-dynamics-abm.tumor.classes.tumor_growth.TumorGrowth.TVH", "modulename": "tumor-dynamics-abm.tumor.classes.tumor_growth", "qualname": "TumorGrowth.TVH", "kind": "variable", "doc": "<p></p>\n", "annotation": ": tumor.classes.tumor_visualization_helper.TumorVisualizationHelper"}, {"fullname": "tumor-dynamics-abm.tumor.classes.tumor_growth.TumorGrowth.height", "modulename": "tumor-dynamics-abm.tumor.classes.tumor_growth", "qualname": "TumorGrowth.height", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "tumor-dynamics-abm.tumor.classes.tumor_growth.TumorGrowth.width", "modulename": "tumor-dynamics-abm.tumor.classes.tumor_growth", "qualname": "TumorGrowth.width", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "tumor-dynamics-abm.tumor.classes.tumor_growth.TumorGrowth.center", "modulename": "tumor-dynamics-abm.tumor.classes.tumor_growth", "qualname": "TumorGrowth.center", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "tumor-dynamics-abm.tumor.classes.tumor_growth.TumorGrowth.steps", "modulename": "tumor-dynamics-abm.tumor.classes.tumor_growth", "qualname": "TumorGrowth.steps", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "tumor-dynamics-abm.tumor.classes.tumor_growth.TumorGrowth.seed", "modulename": "tumor-dynamics-abm.tumor.classes.tumor_growth", "qualname": "TumorGrowth.seed", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "tumor-dynamics-abm.tumor.classes.tumor_growth.TumorGrowth.ecm_layer", "modulename": "tumor-dynamics-abm.tumor.classes.tumor_growth", "qualname": "TumorGrowth.ecm_layer", "kind": "variable", "doc": "<p></p>\n", "annotation": ": mesa.space.PropertyLayer"}, {"fullname": "tumor-dynamics-abm.tumor.classes.tumor_growth.TumorGrowth.nutrient_layer", "modulename": "tumor-dynamics-abm.tumor.classes.tumor_growth", "qualname": "TumorGrowth.nutrient_layer", "kind": "variable", "doc": "<p></p>\n", "annotation": ": mesa.space.PropertyLayer"}, {"fullname": "tumor-dynamics-abm.tumor.classes.tumor_growth.TumorGrowth.grid", "modulename": "tumor-dynamics-abm.tumor.classes.tumor_growth", "qualname": "TumorGrowth.grid", "kind": "variable", "doc": "<p></p>\n", "annotation": ": mesa.space.MultiGrid"}, {"fullname": "tumor-dynamics-abm.tumor.classes.tumor_growth.TumorGrowth.app", "modulename": "tumor-dynamics-abm.tumor.classes.tumor_growth", "qualname": "TumorGrowth.app", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "tumor-dynamics-abm.tumor.classes.tumor_growth.TumorGrowth.api", "modulename": "tumor-dynamics-abm.tumor.classes.tumor_growth", "qualname": "TumorGrowth.api", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "tumor-dynamics-abm.tumor.classes.tumor_growth.TumorGrowth.bip", "modulename": "tumor-dynamics-abm.tumor.classes.tumor_growth", "qualname": "TumorGrowth.bip", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "tumor-dynamics-abm.tumor.classes.tumor_growth.TumorGrowth.bii", "modulename": "tumor-dynamics-abm.tumor.classes.tumor_growth", "qualname": "TumorGrowth.bii", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "tumor-dynamics-abm.tumor.classes.tumor_growth.TumorGrowth.k", "modulename": "tumor-dynamics-abm.tumor.classes.tumor_growth", "qualname": "TumorGrowth.k", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "tumor-dynamics-abm.tumor.classes.tumor_growth.TumorGrowth.tau", "modulename": "tumor-dynamics-abm.tumor.classes.tumor_growth", "qualname": "TumorGrowth.tau", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "tumor-dynamics-abm.tumor.classes.tumor_growth.TumorGrowth.gamma", "modulename": "tumor-dynamics-abm.tumor.classes.tumor_growth", "qualname": "TumorGrowth.gamma", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "tumor-dynamics-abm.tumor.classes.tumor_growth.TumorGrowth.D", "modulename": "tumor-dynamics-abm.tumor.classes.tumor_growth", "qualname": "TumorGrowth.D", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "tumor-dynamics-abm.tumor.classes.tumor_growth.TumorGrowth.h", "modulename": "tumor-dynamics-abm.tumor.classes.tumor_growth", "qualname": "TumorGrowth.h", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "tumor-dynamics-abm.tumor.classes.tumor_growth.TumorGrowth.theta_p", "modulename": "tumor-dynamics-abm.tumor.classes.tumor_growth", "qualname": "TumorGrowth.theta_p", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "tumor-dynamics-abm.tumor.classes.tumor_growth.TumorGrowth.theta_i", "modulename": "tumor-dynamics-abm.tumor.classes.tumor_growth", "qualname": "TumorGrowth.theta_i", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "tumor-dynamics-abm.tumor.classes.tumor_growth.TumorGrowth.lam", "modulename": "tumor-dynamics-abm.tumor.classes.tumor_growth", "qualname": "TumorGrowth.lam", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "tumor-dynamics-abm.tumor.classes.tumor_growth.TumorGrowth.phi_c", "modulename": "tumor-dynamics-abm.tumor.classes.tumor_growth", "qualname": "TumorGrowth.phi_c", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "tumor-dynamics-abm.tumor.classes.tumor_growth.TumorGrowth.distribution", "modulename": "tumor-dynamics-abm.tumor.classes.tumor_growth", "qualname": "TumorGrowth.distribution", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "tumor-dynamics-abm.tumor.classes.tumor_growth.TumorGrowth.N_T", "modulename": "tumor-dynamics-abm.tumor.classes.tumor_growth", "qualname": "TumorGrowth.N_T", "kind": "variable", "doc": "<p></p>\n", "annotation": ": numpy.ndarray"}, {"fullname": "tumor-dynamics-abm.tumor.classes.tumor_growth.TumorGrowth.Nec", "modulename": "tumor-dynamics-abm.tumor.classes.tumor_growth", "qualname": "TumorGrowth.Nec", "kind": "variable", "doc": "<p></p>\n", "annotation": ": numpy.ndarray"}, {"fullname": "tumor-dynamics-abm.tumor.classes.tumor_growth.TumorGrowth.number_births", "modulename": "tumor-dynamics-abm.tumor.classes.tumor_growth", "qualname": "TumorGrowth.number_births", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list[int]"}, {"fullname": "tumor-dynamics-abm.tumor.classes.tumor_growth.TumorGrowth.number_deaths", "modulename": "tumor-dynamics-abm.tumor.classes.tumor_growth", "qualname": "TumorGrowth.number_deaths", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list[int]"}, {"fullname": "tumor-dynamics-abm.tumor.classes.tumor_growth.TumorGrowth.ecm_layers", "modulename": "tumor-dynamics-abm.tumor.classes.tumor_growth", "qualname": "TumorGrowth.ecm_layers", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list[numpy.ndarray]"}, {"fullname": "tumor-dynamics-abm.tumor.classes.tumor_growth.TumorGrowth.nutrient_layers", "modulename": "tumor-dynamics-abm.tumor.classes.tumor_growth", "qualname": "TumorGrowth.nutrient_layers", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list[numpy.ndarray]"}, {"fullname": "tumor-dynamics-abm.tumor.classes.tumor_growth.TumorGrowth.N_Ts", "modulename": "tumor-dynamics-abm.tumor.classes.tumor_growth", "qualname": "TumorGrowth.N_Ts", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list[numpy.ndarray]"}, {"fullname": "tumor-dynamics-abm.tumor.classes.tumor_growth.TumorGrowth.Necs", "modulename": "tumor-dynamics-abm.tumor.classes.tumor_growth", "qualname": "TumorGrowth.Necs", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list[numpy.ndarray]"}, {"fullname": "tumor-dynamics-abm.tumor.classes.tumor_growth.TumorGrowth.births", "modulename": "tumor-dynamics-abm.tumor.classes.tumor_growth", "qualname": "TumorGrowth.births", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list[int]"}, {"fullname": "tumor-dynamics-abm.tumor.classes.tumor_growth.TumorGrowth.radii", "modulename": "tumor-dynamics-abm.tumor.classes.tumor_growth", "qualname": "TumorGrowth.radii", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list[float]"}, {"fullname": "tumor-dynamics-abm.tumor.classes.tumor_growth.TumorGrowth.delta_d", "modulename": "tumor-dynamics-abm.tumor.classes.tumor_growth", "qualname": "TumorGrowth.delta_d", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "tumor-dynamics-abm.tumor.classes.tumor_growth.TumorGrowth.proliferating_cells", "modulename": "tumor-dynamics-abm.tumor.classes.tumor_growth", "qualname": "TumorGrowth.proliferating_cells", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list[int]"}, {"fullname": "tumor-dynamics-abm.tumor.classes.tumor_growth.TumorGrowth.invasive_cells", "modulename": "tumor-dynamics-abm.tumor.classes.tumor_growth", "qualname": "TumorGrowth.invasive_cells", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list[int]"}, {"fullname": "tumor-dynamics-abm.tumor.classes.tumor_growth.TumorGrowth.necrotic_cells", "modulename": "tumor-dynamics-abm.tumor.classes.tumor_growth", "qualname": "TumorGrowth.necrotic_cells", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list[int]"}, {"fullname": "tumor-dynamics-abm.tumor.classes.tumor_growth.TumorGrowth.init_nutrient_layer", "modulename": "tumor-dynamics-abm.tumor.classes.tumor_growth", "qualname": "TumorGrowth.init_nutrient_layer", "kind": "function", "doc": "<p>Initializes the nutrient layer by sampling \nfrom a uniform distribution U(0, 1) at each site.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tumor-dynamics-abm.tumor.classes.tumor_growth.TumorGrowth.init_uniform_ECM", "modulename": "tumor-dynamics-abm.tumor.classes.tumor_growth", "qualname": "TumorGrowth.init_uniform_ECM", "kind": "function", "doc": "<p>Initializes the ECM distribution by sampling \nfrom a uniform distribution U(0, 1) at each site..</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tumor-dynamics-abm.tumor.classes.tumor_growth.TumorGrowth.init_voronoi_ECM", "modulename": "tumor-dynamics-abm.tumor.classes.tumor_growth", "qualname": "TumorGrowth.init_voronoi_ECM", "kind": "function", "doc": "<p>Initializes the ECM as a voronoi tesselation.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tumor-dynamics-abm.tumor.classes.tumor_growth.TumorGrowth.add_agent", "modulename": "tumor-dynamics-abm.tumor.classes.tumor_growth", "qualname": "TumorGrowth.add_agent", "kind": "function", "doc": "<p>Create new agent and add to grid and scheduler.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>state (str):</strong>  'necrotic', 'proliferative' or 'invasive'.</li>\n<li><strong>id (int):</strong>  unique identifier of the agent.</li>\n<li><strong>pos (tuple[int, int]):</strong>  intial x, y position of new agent.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">state</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"nb\">id</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">pos</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tumor-dynamics-abm.tumor.classes.tumor_growth.TumorGrowth.displace_agent", "modulename": "tumor-dynamics-abm.tumor.classes.tumor_growth", "qualname": "TumorGrowth.displace_agent", "kind": "function", "doc": "<p>Move agent and update agent distribution.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>agent (TumorCell):</strong>  Agent to move.</li>\n<li><strong>new_pos (tuple):</strong>  new position of agent.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">agent</span><span class=\"p\">:</span> <span class=\"n\">tumor</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">tumor_cell</span><span class=\"o\">.</span><span class=\"n\">TumorCell</span>, </span><span class=\"param\"><span class=\"n\">new_pos</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tumor-dynamics-abm.tumor.classes.tumor_growth.TumorGrowth.degredation", "modulename": "tumor-dynamics-abm.tumor.classes.tumor_growth", "qualname": "TumorGrowth.degredation", "kind": "function", "doc": "<p>All living tumor cells degrade neighboring tissue (ECM).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tumor-dynamics-abm.tumor.classes.tumor_growth.TumorGrowth.diffusion", "modulename": "tumor-dynamics-abm.tumor.classes.tumor_growth", "qualname": "TumorGrowth.diffusion", "kind": "function", "doc": "<p>Update nutrient field with discretized reaction-diffusion equation.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tumor-dynamics-abm.tumor.classes.tumor_growth.TumorGrowth.diffusion_equation", "modulename": "tumor-dynamics-abm.tumor.classes.tumor_growth", "qualname": "TumorGrowth.diffusion_equation", "kind": "function", "doc": "<p>Discretized reaction-diffusion equation.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>N_t (int):</strong>  Total number of agents in current grid cell.</li>\n<li><strong>x, y (int, int):</strong>  position of grid cell.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>(int): Updated nutrient concentration in grid cell</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">N_t</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tumor-dynamics-abm.tumor.classes.tumor_growth.TumorGrowth.cell_death", "modulename": "tumor-dynamics-abm.tumor.classes.tumor_growth", "qualname": "TumorGrowth.cell_death", "kind": "function", "doc": "<p>Agents are removed if local nutrients are below threshold.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tumor-dynamics-abm.tumor.classes.tumor_growth.TumorGrowth.new_state", "modulename": "tumor-dynamics-abm.tumor.classes.tumor_growth", "qualname": "TumorGrowth.new_state", "kind": "function", "doc": "<p>Update the state of all agents in random order.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tumor-dynamics-abm.tumor.classes.tumor_growth.TumorGrowth.count_states", "modulename": "tumor-dynamics-abm.tumor.classes.tumor_growth", "qualname": "TumorGrowth.count_states", "kind": "function", "doc": "<p>Iterates through the grid counting the number of cells of each state.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tumor-dynamics-abm.tumor.classes.tumor_growth.TumorGrowth.step", "modulename": "tumor-dynamics-abm.tumor.classes.tumor_growth", "qualname": "TumorGrowth.step", "kind": "function", "doc": "<p>Single simulation step. \nUpdates ECM, nutrients, state of agents and their distribution.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tumor-dynamics-abm.tumor.classes.tumor_growth.TumorGrowth.run_model", "modulename": "tumor-dynamics-abm.tumor.classes.tumor_growth", "qualname": "TumorGrowth.run_model", "kind": "function", "doc": "<p>Grow tumour for number of steps or until tumour touches border.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>print_progress (bool):</strong>  prints 'current step/ total' if true. </li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>results (tuple): Final radius, living agents, roughness, growth velocity and timestep.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">print_progress</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tumor-dynamics-abm.tumor.classes.tumor_growth.TumorGrowth.touches_border", "modulename": "tumor-dynamics-abm.tumor.classes.tumor_growth", "qualname": "TumorGrowth.touches_border", "kind": "function", "doc": "<p>Returns True if tumor touches border, else False.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "tumor-dynamics-abm.tumor.classes.tumor_growth.TumorGrowth.save_iteration_data", "modulename": "tumor-dynamics-abm.tumor.classes.tumor_growth", "qualname": "TumorGrowth.save_iteration_data", "kind": "function", "doc": "<p>Save snapshots of current timestep.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tumor-dynamics-abm.tumor.classes.tumor_growth.TumorGrowth.collect_results", "modulename": "tumor-dynamics-abm.tumor.classes.tumor_growth", "qualname": "TumorGrowth.collect_results", "kind": "function", "doc": "<p>Collect final statistics of the simulation.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">step</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tumor-dynamics-abm.tumor.classes.tumor_growth.TumorGrowth.save_simulation_results_to_file", "modulename": "tumor-dynamics-abm.tumor.classes.tumor_growth", "qualname": "TumorGrowth.save_simulation_results_to_file", "kind": "function", "doc": "<p>Save simulation results to a pickle file.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>string: timestamp of when the files were saved.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tumor-dynamics-abm.tumor.classes.tumor_growth.TumorGrowth.load_simulation_data_from_file", "modulename": "tumor-dynamics-abm.tumor.classes.tumor_growth", "qualname": "TumorGrowth.load_simulation_data_from_file", "kind": "function", "doc": "<p>Loads simulation data from file.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>timestamp (string):</strong>  timestamp that the files were originally saved at (see filename to find this value).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">timestamp</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tumor-dynamics-abm.tumor.classes.tumor_visualization_helper", "modulename": "tumor-dynamics-abm.tumor.classes.tumor_visualization_helper", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "tumor-dynamics-abm.tumor.classes.tumor_visualization_helper.TumorVisualizationHelper", "modulename": "tumor-dynamics-abm.tumor.classes.tumor_visualization_helper", "qualname": "TumorVisualizationHelper", "kind": "class", "doc": "<p>Visualization helper class.</p>\n\n<p>Helper TumorVisualization calculate statistics used in plots, such as\naverage radius of the tumor or roughness over time.</p>\n\n<p>Example usage:</p>\n\n<pre><code>    TVH = TumorVisualizationHelper(model)\n    roughness_over_time = TVH.calculate_roughness_progression()\n</code></pre>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>model:</strong>  Model to analyze (after completed simulation).</li>\n</ul>\n"}, {"fullname": "tumor-dynamics-abm.tumor.classes.tumor_visualization_helper.TumorVisualizationHelper.__init__", "modulename": "tumor-dynamics-abm.tumor.classes.tumor_visualization_helper", "qualname": "TumorVisualizationHelper.__init__", "kind": "function", "doc": "<p>Initializes helper class.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>model (TumorGrowth):</strong>  Model to analyze (after completed simulation).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">model</span></span>)</span>"}, {"fullname": "tumor-dynamics-abm.tumor.classes.tumor_visualization_helper.TumorVisualizationHelper.model", "modulename": "tumor-dynamics-abm.tumor.classes.tumor_visualization_helper", "qualname": "TumorVisualizationHelper.model", "kind": "variable", "doc": "<p></p>\n", "annotation": ": object"}, {"fullname": "tumor-dynamics-abm.tumor.classes.tumor_visualization_helper.TumorVisualizationHelper.calculate_average_distance", "modulename": "tumor-dynamics-abm.tumor.classes.tumor_visualization_helper", "qualname": "TumorVisualizationHelper.calculate_average_distance", "kind": "function", "doc": "<p>Calculate the average distance from the center of the mask to the edge.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>mask (np.ndarray):</strong>  Binary mask matrix of border.</li>\n<li><strong>center (tuple):</strong>  Coordinates of the center</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>float: Average distance to the edge.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">edge_mask</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">center</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "tumor-dynamics-abm.tumor.classes.tumor_visualization_helper.TumorVisualizationHelper.find_geographical_center", "modulename": "tumor-dynamics-abm.tumor.classes.tumor_visualization_helper", "qualname": "TumorVisualizationHelper.find_geographical_center", "kind": "function", "doc": "<p>Find the geographical center of the mask.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>mask (np.ndarray):</strong>  Binary mask matrix.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>tuple: Coordinates of the geographical center.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mask</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "tumor-dynamics-abm.tumor.classes.tumor_visualization_helper.TumorVisualizationHelper.get_edges_of_a_mask", "modulename": "tumor-dynamics-abm.tumor.classes.tumor_visualization_helper", "qualname": "TumorVisualizationHelper.get_edges_of_a_mask", "kind": "function", "doc": "<p>Find the edges of a binary mask.</p>\n\n<p>Args: \n    mask (np.ndarray): Binary mask matrix of filled object.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>np.ndarray: Binary matrix with only edge cells filled in.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mask</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "tumor-dynamics-abm.tumor.classes.tumor_visualization_helper.TumorVisualizationHelper.compute_variance_of_radius", "modulename": "tumor-dynamics-abm.tumor.classes.tumor_visualization_helper", "qualname": "TumorVisualizationHelper.compute_variance_of_radius", "kind": "function", "doc": "<p>Computes the radius of an imperfectly drawn circle.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>edges_matrix (ndarray):</strong>  represents border of the shape.</li>\n<li><strong>center (tuple):</strong>  approximate center of the shape</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>float: The variance of radius of the imperfect circle.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">edges_matrix</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">center</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "tumor-dynamics-abm.tumor.classes.tumor_visualization_helper.TumorVisualizationHelper.calculate_roughness_progression", "modulename": "tumor-dynamics-abm.tumor.classes.tumor_visualization_helper", "qualname": "TumorVisualizationHelper.calculate_roughness_progression", "kind": "function", "doc": "<p>Find roughness of the tumor over time.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>np.ndarray[float]: roughness at each timestep.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "tumor-dynamics-abm.tumor.classes.tumor_visualization_helper.TumorVisualizationHelper.calculate_roughness", "modulename": "tumor-dynamics-abm.tumor.classes.tumor_visualization_helper", "qualname": "TumorVisualizationHelper.calculate_roughness", "kind": "function", "doc": "<p>Find roughness of a single snapshot.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>N_T (ndarray[int]):</strong>  2D grid with number of living agents at each point.</li>\n<li><strong>Nec (ndarray[int]):</strong>  2D grid with number of necrotic agents at each point.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>float: roughness of tumor.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">N_T</span>, </span><span class=\"param\"><span class=\"n\">Nec</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "tumor-dynamics-abm.tumor.classes.tumor_visualization_helper.TumorVisualizationHelper.radius_progression", "modulename": "tumor-dynamics-abm.tumor.classes.tumor_visualization_helper", "qualname": "TumorVisualizationHelper.radius_progression", "kind": "function", "doc": "<p>Calculates the radial distance of the tumor at each time step.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>ndarray: array of values representing the radius of the tumor at each time step.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tumor-dynamics-abm.tumor.classes.tumor_visualization_helper.TumorVisualizationHelper.radius", "modulename": "tumor-dynamics-abm.tumor.classes.tumor_visualization_helper", "qualname": "TumorVisualizationHelper.radius", "kind": "function", "doc": "<p>Radius of a single snapshot.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>N_T (ndarray[int]):</strong>  2D grid with with number of living agents at each point.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>float: Estimated radius of the tumor.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">N_T</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tumor-dynamics-abm.tumor.classes.tumor_visualization_helper.TumorVisualizationHelper.calculate_velocities", "modulename": "tumor-dynamics-abm.tumor.classes.tumor_visualization_helper", "qualname": "TumorVisualizationHelper.calculate_velocities", "kind": "function", "doc": "<p>Calculate velocities for every delta_d timesteps</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list: a list of velocities for every delta_d timesteps</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "tumor-dynamics-abm.tumor.classes.tumor_visualization_helper.TumorVisualizationHelper.velocity_linear_fit", "modulename": "tumor-dynamics-abm.tumor.classes.tumor_visualization_helper", "qualname": "TumorVisualizationHelper.velocity_linear_fit", "kind": "function", "doc": "<p>Perform linear fit on radius progression.</p>\n\n<p>Returns: \n    float: Fitted average growth velocity of the tumor.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "tumor-dynamics-abm.tumor.classes.tumor_visualizations", "modulename": "tumor-dynamics-abm.tumor.classes.tumor_visualizations", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "tumor-dynamics-abm.tumor.classes.tumor_visualizations.TumorVisualization", "modulename": "tumor-dynamics-abm.tumor.classes.tumor_visualizations", "qualname": "TumorVisualization", "kind": "class", "doc": "<p>Visualize final results of tumor growth simulation.</p>\n\n<p>Example usage:</p>\n\n<pre><code>    visualize = TumorVisualization(model)\n    visualize.plot_all() # to plot final ECM and nutrient distribution and tumor shape.\n</code></pre>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>model:</strong>  Model to visualize.</li>\n<li><strong>TVH:</strong>  Helper class that provides analysis of results.</li>\n</ul>\n"}, {"fullname": "tumor-dynamics-abm.tumor.classes.tumor_visualizations.TumorVisualization.__init__", "modulename": "tumor-dynamics-abm.tumor.classes.tumor_visualizations", "qualname": "TumorVisualization.__init__", "kind": "function", "doc": "<p>Initializes visualisation.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>model (TumorGrowth):</strong>  Model to visualize.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">model</span></span>)</span>"}, {"fullname": "tumor-dynamics-abm.tumor.classes.tumor_visualizations.TumorVisualization.model", "modulename": "tumor-dynamics-abm.tumor.classes.tumor_visualizations", "qualname": "TumorVisualization.model", "kind": "variable", "doc": "<p></p>\n", "annotation": ": tumor.classes.tumor_growth.TumorGrowth"}, {"fullname": "tumor-dynamics-abm.tumor.classes.tumor_visualizations.TumorVisualization.TVH", "modulename": "tumor-dynamics-abm.tumor.classes.tumor_visualizations", "qualname": "TumorVisualization.TVH", "kind": "variable", "doc": "<p></p>\n", "annotation": ": tumor.classes.tumor_visualization_helper.TumorVisualizationHelper"}, {"fullname": "tumor-dynamics-abm.tumor.classes.tumor_visualizations.TumorVisualization.show_ecm", "modulename": "tumor-dynamics-abm.tumor.classes.tumor_visualizations", "qualname": "TumorVisualization.show_ecm", "kind": "function", "doc": "<p>Plot current ECM density field.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>position (int):</strong>  which snapshot to plot. Default plots final snapshot.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">position</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tumor-dynamics-abm.tumor.classes.tumor_visualizations.TumorVisualization.show_nutrients", "modulename": "tumor-dynamics-abm.tumor.classes.tumor_visualizations", "qualname": "TumorVisualization.show_nutrients", "kind": "function", "doc": "<p>Plot current nutrient concentration field.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>position (int):</strong>  which snapshot to plot. Default plots final snapshot.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">position</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tumor-dynamics-abm.tumor.classes.tumor_visualizations.TumorVisualization.show_tumor", "modulename": "tumor-dynamics-abm.tumor.classes.tumor_visualizations", "qualname": "TumorVisualization.show_tumor", "kind": "function", "doc": "<p>Plot mask of the tumor. Excludes necrotic cells.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>position (int):</strong>  which snapshot to plot. Default plots final snapshot.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">position</span><span class=\"o\">=-</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tumor-dynamics-abm.tumor.classes.tumor_visualizations.TumorVisualization.plot_necrotic_cells", "modulename": "tumor-dynamics-abm.tumor.classes.tumor_visualizations", "qualname": "TumorVisualization.plot_necrotic_cells", "kind": "function", "doc": "<p>Plot mask of the tumor, only including necrotic cells.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>position (int):</strong>  which snapshot to plot. Default plots final snapshot.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">position</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tumor-dynamics-abm.tumor.classes.tumor_visualizations.TumorVisualization.plot_tumor_over_time", "modulename": "tumor-dynamics-abm.tumor.classes.tumor_visualizations", "qualname": "TumorVisualization.plot_tumor_over_time", "kind": "function", "doc": "<p>Plot tumor over time.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>steps (int):</strong>  Number of iterations performed in simulation.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">steps</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tumor-dynamics-abm.tumor.classes.tumor_visualizations.TumorVisualization.plot_all", "modulename": "tumor-dynamics-abm.tumor.classes.tumor_visualizations", "qualname": "TumorVisualization.plot_all", "kind": "function", "doc": "<p>Plot ECM, nutrient field and tumour shape in a single figure.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>position (int):</strong>  which snapshot to plot. Default plots final snapshot.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">position</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tumor-dynamics-abm.tumor.classes.tumor_visualizations.TumorVisualization.plot_birth_deaths", "modulename": "tumor-dynamics-abm.tumor.classes.tumor_visualizations", "qualname": "TumorVisualization.plot_birth_deaths", "kind": "function", "doc": "<p>Plot cumulative number of births and deaths.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tumor-dynamics-abm.tumor.classes.tumor_visualizations.TumorVisualization.plot_radial_distance", "modulename": "tumor-dynamics-abm.tumor.classes.tumor_visualizations", "qualname": "TumorVisualization.plot_radial_distance", "kind": "function", "doc": "<p>Plot the average radius of the tumor over time.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tumor-dynamics-abm.tumor.classes.tumor_visualizations.TumorVisualization.plot_roughness", "modulename": "tumor-dynamics-abm.tumor.classes.tumor_visualizations", "qualname": "TumorVisualization.plot_roughness", "kind": "function", "doc": "<p>Plot the roughness of the tumor over time.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tumor-dynamics-abm.tumor.classes.tumor_visualizations.TumorVisualization.plot_cell_types", "modulename": "tumor-dynamics-abm.tumor.classes.tumor_visualizations", "qualname": "TumorVisualization.plot_cell_types", "kind": "function", "doc": "<p>Plot progression of absolute counts of each cell type.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tumor-dynamics-abm.tumor.classes.tumor_visualizations.TumorVisualization.plot_proportion_cell_types", "modulename": "tumor-dynamics-abm.tumor.classes.tumor_visualizations", "qualname": "TumorVisualization.plot_proportion_cell_types", "kind": "function", "doc": "<p>Plot progression of fractional cell distribution over time.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tumor-dynamics-abm.tumor.classes.tumor_visualizations.TumorVisualization.plot_velocities", "modulename": "tumor-dynamics-abm.tumor.classes.tumor_visualizations", "qualname": "TumorVisualization.plot_velocities", "kind": "function", "doc": "<p>Plot the progression of the growth velocity of the tumor.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tumor-dynamics-abm.tumor.helpers", "modulename": "tumor-dynamics-abm.tumor.helpers", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "tumor-dynamics-abm.tumor.helpers.save_timestamp_metadata", "modulename": "tumor-dynamics-abm.tumor.helpers", "qualname": "save_timestamp_metadata", "kind": "function", "doc": "<p>Save parameter values of pickeled model object.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>model (TumorGrowth):</strong>  model that was pickled.</li>\n<li><strong>timestamp (str):</strong>  unique identifier of model, which was saved as \n'simulation_data_<timestamp>.pickle'.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">model</span>, </span><span class=\"param\"><span class=\"n\">timestamp</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tumor-dynamics-abm.tumor.helpers.filter_runs", "modulename": "tumor-dynamics-abm.tumor.helpers", "qualname": "filter_runs", "kind": "function", "doc": "<p>Filters existing simulation data, returns timestamp[s] with correct param values.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>params (dict):</strong>  dictionary containing parameter names (keys) and their desired value</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">params</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tumor-dynamics-abm.tumor.helpers.update_metadata", "modulename": "tumor-dynamics-abm.tumor.helpers", "qualname": "update_metadata", "kind": "function", "doc": "<p>Removes metadata from the metadata.json if runs were deleted.\nDeletion is checked via presence of simulation_parameters_run_id.pickle files.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tumor-dynamics-abm.tumor.helpers.build_and_save_animation", "modulename": "tumor-dynamics-abm.tumor.helpers", "qualname": "build_and_save_animation", "kind": "function", "doc": "<p>Animates list of 2D-arrays and saves to mp4.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>data_frames (list[ndarray]):</strong>  list of frames to be animated.</li>\n<li><strong>title (str):</strong>  title of the output file</li>\n<li><strong>iterations (int):</strong>  Number of frames needed.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data_frames</span>, </span><span class=\"param\"><span class=\"n\">title</span>, </span><span class=\"param\"><span class=\"n\">iterations</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tumor-dynamics-abm.tumor.helpers.print_summary_message", "modulename": "tumor-dynamics-abm.tumor.helpers", "qualname": "print_summary_message", "kind": "function", "doc": "<p>Prints summary message of completed simulation.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>model (TumorGrowth):</strong>  model of finished simulation</li>\n<li><strong>steps_taken (int):</strong>  number of steps completed, returned by run_model() method of model.</li>\n<li><strong>payoff (ndarray[float]):</strong>  payoff matrix used in the simulation.</li>\n<li><strong>roughness (float):</strong>  final roughness of tumor, returned by run_model() method.</li>\n<li><strong>radius (float):</strong>  final radius of tumor, returned by run_model() method.</li>\n<li><strong>velocity (float):</strong>  Average radial growth velocity, returned by run_model() method.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">model</span>, </span><span class=\"param\"><span class=\"n\">steps_taken</span>, </span><span class=\"param\"><span class=\"n\">payoff</span>, </span><span class=\"param\"><span class=\"n\">roughness</span>, </span><span class=\"param\"><span class=\"n\">radius</span>, </span><span class=\"param\"><span class=\"n\">velocity</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tumor-dynamics-abm.tumor.sensitivity_analysis", "modulename": "tumor-dynamics-abm.tumor.sensitivity_analysis", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "tumor-dynamics-abm.tumor.sensitivity_analysis.run_model", "modulename": "tumor-dynamics-abm.tumor.sensitivity_analysis", "qualname": "run_model", "kind": "function", "doc": "<p>Wrapper function used to run model in parallel when provided with array of params.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>param_values (ndarray):</strong>  2D array of one or many sets of parameter values to use in TumorGrowth model. </li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>ndarray: Contains main result of the simulations, used for sensitivity analysis. Currently average radial growth velocity.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">param_values</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tumor-dynamics-abm.tumor.sensitivity_analysis_csv_only", "modulename": "tumor-dynamics-abm.tumor.sensitivity_analysis_csv_only", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "tumor-dynamics-abm.tumor.sensitivity_analysis_csv_only.to_latex", "modulename": "tumor-dynamics-abm.tumor.sensitivity_analysis_csv_only", "qualname": "to_latex", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;app&#x27;: &#x27;$\\\\alpha_{pp}$&#x27;, &#x27;bii&#x27;: &#x27;$\\\\beta_{ii}$&#x27;, &#x27;api&#x27;: &#x27;$\\\\alpha_{pi}$&#x27;, &#x27;bip&#x27;: &#x27;$\\\\beta_{ip}$&#x27;, &#x27;theta_p&#x27;: &#x27;$\\\\theta_p$&#x27;, &#x27;theta_i&#x27;: &#x27;$\\\\theta_i$&#x27;, &#x27;gamma&#x27;: &#x27;$\\\\gamma$&#x27;, &#x27;phi_c&#x27;: &#x27;$\\\\phi_c$&#x27;, &#x27;D&#x27;: &#x27;D&#x27;, &#x27;k&#x27;: &#x27;k&#x27;}"}, {"fullname": "tumor-dynamics-abm.tumor.sensitivity_analysis_csv_only.S1_result_files", "modulename": "tumor-dynamics-abm.tumor.sensitivity_analysis_csv_only", "qualname": "S1_result_files", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;../save_files/SA_analysis_128_distinct_samples_uniform/S1_tumor_diameter_steps_1000_grid_101_params_varied_10.csv&#x27;, &#x27;../save_files/SA_analysis_128_distinct_samples_uniform_no_gamma/S1_tumor_diameter_steps_1000_grid_101_params_varied_9.csv&#x27;, &#x27;../save_files/SA_analysis_128_distinct_samples_voronoi/S1_tumor_diameter_steps_1000_grid_101_params_varied_10.csv&#x27;, &#x27;../save_files/SA_analysis_128_distinct_samples_voronoi_no_gamma/S1_tumor_diameter_steps_1000_grid_101_params_varied_9.csv&#x27;, &#x27;../save_files/SA_analysis_1024_distinct_samples_uniform/S1_tumor_diameter_steps_1000_grid_101_params_varied_6.csv&#x27;, &#x27;../save_files/SA_analysis_1024_distinct_samples_voronoi/S1_tumor_diameter_steps_1000_grid_101_params_varied_6.csv&#x27;]"}, {"fullname": "tumor-dynamics-abm.tumor.sensitivity_analysis_csv_only.ST_result_files", "modulename": "tumor-dynamics-abm.tumor.sensitivity_analysis_csv_only", "qualname": "ST_result_files", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;../save_files/SA_analysis_128_distinct_samples_uniform/ST_tumor_diameter_steps_1000_grid_101_params_varied_10.csv&#x27;, &#x27;../save_files/SA_analysis_128_distinct_samples_uniform_no_gamma/ST_tumor_diameter_steps_1000_grid_101_params_varied_9.csv&#x27;, &#x27;../save_files/SA_analysis_128_distinct_samples_voronoi/ST_tumor_diameter_steps_1000_grid_101_params_varied_10.csv&#x27;, &#x27;../save_files/SA_analysis_128_distinct_samples_voronoi_no_gamma/ST_tumor_diameter_steps_1000_grid_101_params_varied_9.csv&#x27;, &#x27;../save_files/SA_analysis_1024_distinct_samples_uniform/ST_tumor_diameter_steps_1000_grid_101_params_varied_6.csv&#x27;, &#x27;../save_files/SA_analysis_1024_distinct_samples_voronoi/ST_tumor_diameter_steps_1000_grid_101_params_varied_6.csv&#x27;]"}, {"fullname": "tumor-dynamics-abm.tumor.sensitivity_analysis_csv_only.plot_layout", "modulename": "tumor-dynamics-abm.tumor.sensitivity_analysis_csv_only", "qualname": "plot_layout", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();